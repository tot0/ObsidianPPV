/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => OpenVSCode
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  ribbonIcon: true,
  ribbonCommandUsesCode: true,
  executeTemplate: 'code "{{vaultpath}}" "{{vaultpath}}/{{filepath}}"',
  openFile: true,
  workspacePath: "{{vaultpath}}",
  useUrlInsiders: false
};
var OpenVSCodeSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "General settings" });
    new import_obsidian.Setting(containerEl).setName("Display Ribbon Icon").setDesc("Toggle this OFF if you want to hide the Ribbon Icon.").addToggle((toggle) => toggle.setValue(this.plugin.settings.ribbonIcon).onChange((value) => {
      this.plugin.settings.ribbonIcon = value;
      this.plugin.saveSettings();
      this.plugin.refreshIconRibbon();
    }));
    new import_obsidian.Setting(containerEl).setName("Ribbon opens via `code` command").setDesc(`Toggle this OFF if you'd prefer that the Ribbon Icon opens VSCode via URL.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.ribbonCommandUsesCode).onChange((value) => {
      this.plugin.settings.ribbonCommandUsesCode = value;
      this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Open via `code` CLI settings" });
    new import_obsidian.Setting(containerEl).setName("Template for executing the `code` command").setDesc('You can use the following variables: `{{vaultpath}}` (absolute), `{{filepath}}` (relative). Note that on MacOS, a full path to the VSCode executable is required (generally "/usr/local/bin/code"). Example: `/usr/local/bin/code "{{vaultpath}}" "{{vaultpath}}/{{filepath}}"`').addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.executeTemplate).setValue(this.plugin.settings.executeTemplate || DEFAULT_SETTINGS.executeTemplate).onChange((value) => {
      value = value.trim();
      if (value === "")
        value = DEFAULT_SETTINGS.executeTemplate;
      this.plugin.settings.executeTemplate = value;
      this.plugin.saveData(this.plugin.settings);
    }));
    containerEl.createEl("h3", { text: "Open via `vscode://` URL settings" });
    const openViaUrlCaveat = containerEl.createEl("p");
    const openViaUrlCaveatEm = openViaUrlCaveat.createEl("em", {
      text: `
				\u26A0\uFE0F This setting is not recommended for Windows users due to
				UX issues caused by security enhancements in VSCode on Windows.
				More information:
			`
    });
    openViaUrlCaveatEm.appendChild(createEl("a", {
      text: "Open in VSCode Readme",
      href: "https://github.com/NomarCub/obsidian-open-vscode/blob/master/README.md#caveats-regarding-the-url-command-for-windows-users"
    }));
    openViaUrlCaveatEm.appendText(".");
    new import_obsidian.Setting(containerEl).setName("Open current file").setDesc("Open the current file rather than the root of the vault.").addToggle((toggle) => toggle.setValue(this.plugin.settings.openFile || DEFAULT_SETTINGS.openFile).onChange((value) => {
      this.plugin.settings.openFile = value;
      this.plugin.saveData(this.plugin.settings);
    }));
    new import_obsidian.Setting(containerEl).setName("Path to VSCode Workspace").setDesc('Defaults to the {{vaultpath}} template variable. You can set this to an absolute path to a ".code-workspace" file if you prefer to use a Multi Root workspace file: ').setClass("setting-item--vscode-workspacePath").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.workspacePath).setValue(this.plugin.settings.workspacePath || DEFAULT_SETTINGS.workspacePath).onChange((value) => {
      value = value.trim();
      if (value === "")
        value = DEFAULT_SETTINGS.workspacePath;
      this.plugin.settings.workspacePath = value;
      this.plugin.saveData(this.plugin.settings);
    }));
    const workspacePathDescEl = containerEl.querySelector(".setting-item--vscode-workspacePath .setting-item-description");
    workspacePathDescEl.appendChild(createEl("a", {
      href: "https://code.visualstudio.com/docs/editor/workspaces#_multiroot-workspaces",
      text: "https://code.visualstudio.com/docs/editor/workspaces#_multiroot-workspaces"
    }));
    workspacePathDescEl.appendText(".");
    new import_obsidian.Setting(containerEl).setName("Open VSCode using a `vscode-insiders://` URL").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.useUrlInsiders).onChange((value) => {
        this.plugin.settings.useUrlInsiders = value;
        this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var svg = `
<path
  fill="currentColor"
  d="M 96.453125 10.773438 L 75.882812 0.878906 C 73.488281 -0.277344 70.640625 0.210938 68.769531 2.082031 L 29.367188 38.035156 L 12.195312 25.011719 C 10.601562 23.789062 8.351562 23.890625 6.871094 25.242188 L 1.371094 30.253906 C -0.449219 31.898438 -0.449219 34.761719 1.355469 36.40625 L 16.25 49.996094 L 1.355469 63.585938 C -0.449219 65.230469 -0.449219 68.097656 1.371094 69.742188 L 6.871094 74.753906 C 8.367188 76.101562 10.601562 76.203125 12.195312 74.980469 L 29.367188 61.945312 L 68.789062 97.914062 C 70.644531 99.785156 73.492188 100.273438 75.882812 99.117188 L 96.476562 89.203125 C 98.640625 88.164062 100.007812 85.980469 100.007812 83.570312 L 100.007812 16.398438 C 100.007812 14.007812 98.621094 11.808594 96.460938 10.769531 Z M 75.015625 72.707031 L 45.101562 50 L 75.015625 27.292969 Z M 75.015625 72.707031"
/>`;
(0, import_obsidian2.addIcon)("vscode-logo", svg);
var DEV = false;
var OpenVSCode = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.refreshIconRibbon = () => {
      var _a;
      (_a = this.ribbonIcon) == null ? void 0 : _a.remove();
      if (this.settings.ribbonIcon) {
        this.ribbonIcon = this.addRibbonIcon("vscode-logo", "VSCode", () => {
          const ribbonCommand = this.settings.ribbonCommandUsesCode ? "openVSCode" : "openVSCodeUrl";
          this[ribbonCommand]();
        });
      }
    };
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Loading " + this.manifest.name + " plugin");
      this.addSettingTab(new OpenVSCodeSettingsTab(this.app, this));
      yield this.loadSettings();
      this.refreshIconRibbon();
      this.addCommand({
        id: "open-vscode",
        name: "Open as Visual Studio Code workspace",
        callback: this.openVSCode.bind(this)
      });
      this.addCommand({
        id: "open-vscode-via-url",
        name: "Open as Visual Studio Code workspace using a vscode:// URL",
        callback: this.openVSCodeUrl.bind(this)
      });
      DEV = this.app.plugins.enabledPlugins.has("hot-reload") && this.app.plugins.plugins["hot-reload"].enabledPlugins.has(this.manifest.id);
      if (DEV) {
        this.addCommand({
          id: "open-vscode-reload",
          name: "Reload the plugin in dev",
          callback: this.reload.bind(this)
        });
        this.addCommand({
          id: "open-vscode-reset-settings",
          name: "Reset plugins settings to default in dev",
          callback: this.resetSettings.bind(this)
        });
      }
    });
  }
  openVSCode() {
    return __async(this, null, function* () {
      var _a;
      if (!(this.app.vault.adapter instanceof import_obsidian2.FileSystemAdapter)) {
        return;
      }
      const { executeTemplate } = this.settings;
      const path = this.app.vault.adapter.getBasePath();
      const file = this.app.workspace.getActiveFile();
      const filePath = (_a = file == null ? void 0 : file.path) != null ? _a : "";
      const { exec } = require("child_process");
      let command = executeTemplate.trim() === "" ? DEFAULT_SETTINGS.executeTemplate : executeTemplate;
      command = replaceAll(command, "{{vaultpath}}", path);
      command = replaceAll(command, "{{filepath}}", filePath);
      if (DEV)
        console.log("[openVSCode]", { command });
      exec(command, (error, stdout, stderr) => {
        if (error) {
          console.error(`[openVSCode] exec error: ${error}`);
        }
      });
    });
  }
  openVSCodeUrl() {
    return __async(this, null, function* () {
      var _a;
      if (!(this.app.vault.adapter instanceof import_obsidian2.FileSystemAdapter)) {
        return;
      }
      const { openFile, useUrlInsiders } = this.settings;
      const path = this.app.vault.adapter.getBasePath();
      const file = this.app.workspace.getActiveFile();
      const filePath = (_a = file == null ? void 0 : file.path) != null ? _a : "";
      if (DEV)
        console.log("[open-vscode]", {
          settings: this.settings,
          path,
          filePath
        });
      const protocol = useUrlInsiders ? "vscode-insiders://" : "vscode://";
      let url = `${protocol}file/${path}`;
      if (openFile) {
        url += `/${filePath}`;
        const workspacePath = replaceAll(this.settings.workspacePath, "{{vaultpath}}", path);
        window.open(`vscode://file/${workspacePath}`);
        setTimeout(() => {
          if (DEV)
            console.log("[openVSCode]", { url });
          window.open(url);
        }, 200);
      } else {
        if (DEV)
          console.log("[openVSCode]", { url });
        window.open(url);
      }
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  reload() {
    return __async(this, null, function* () {
      const id = this.manifest.id;
      const plugins = this.app.plugins;
      yield plugins.disablePlugin(id);
      yield plugins.enablePlugin(id);
      console.log("[open-vscode] reloaded", this);
    });
  }
  resetSettings() {
    return __async(this, null, function* () {
      console.log("[open-vscode]", { old: this.settings, DEFAULT_SETTINGS });
      this.settings = DEFAULT_SETTINGS;
      yield this.saveData(this.settings);
    });
  }
};
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function replaceAll(str, find, replace) {
  return str.replace(new RegExp(escapeRegExp(find), "g"), replace);
}
