/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const withSubfolderClass = 'oz-with-subfolder';
const showAllNumbersClass = 'oz-show-all-num';
const rootHiddenClass = 'oz-root-hidden';
const isFolder = (item) => item.file instanceof obsidian.TFolder;
const iterateItems = (items, callback) => {
    for (const key in items) {
        if (!Object.prototype.hasOwnProperty.call(items, key))
            continue;
        callback(items[key]);
    }
};

const setupTitle = (plugin, vault, revert = false) => {
    if (!plugin.fileExplorer)
        throw new Error('fileExplorer not found');
    iterateItems(plugin.fileExplorer.fileItems, (item) => {
        if (!isFolder(item)) {
            setTitle(item, vault);
        }
    });
};
const setTitle = (item, vault) => {
    if (item.file.extension != "md") {
        return;
    }
    let idMatch = item.file.basename.match(/([0-9]+|[a-z]+)/g);
    if (idMatch) {
        let indentCount = (idMatch.length - 1);
        let indentStr = (indentCount * 20).toString() + "px";
        item.titleEl.style.marginLeft = indentStr;
    }
    vault.read(item.file).then(function (val) {
        const match = /# (.+)\s*/.exec(val);
        if (match != null) {
            const name = match[1];
            item.titleInnerEl.innerText = name;
        }
    }).catch(error => {
        console.log(`Error retrieving content of ${item.file.path}: ${error}`);
    });
};
const updateTitle = (targetList, plugin, vault) => {
    const { fileExplorer } = plugin;
    if (!fileExplorer) {
        console.error('fileExplorer missing');
        return;
    }
    for (const path of targetList) {
        // check if path available
        if (!fileExplorer.fileItems[path])
            continue;
        setTitle(fileExplorer.fileItems[path], vault);
    }
};

class VaultHandler {
    constructor(plugin) {
        this.waitingList = [];
        this.update = obsidian.debounce(() => updateTitle(this.waitingList, this.plugin, this.vault), 500, true);
        this.handler = (...args) => {
            for (const arg of args) {
                const path = arg instanceof obsidian.TAbstractFile ? arg.path : arg;
                this.waitingList.push(path);
            }
            this.update();
        };
        this.registerVaultEvent = () => {
            this.plugin.registerEvent(this.vault.on('create', this.handler));
            this.plugin.registerEvent(this.vault.on('rename', this.handler));
            this.plugin.registerEvent(this.vault.on('delete', this.handler));
        };
        this.plugin = plugin;
    }
    get app() {
        return this.plugin.app;
    }
    get vault() {
        return this.plugin.app.vault;
    }
}

class GraphInteractor {
    constructor(plugin) {
        this.plugin = plugin;
    }
    updateGraphNodes() {
        let graph = this.getGraph();
        if (graph == undefined || graph.renderer == undefined) {
            return;
        }
        //@ts-ignore
        for (const node of graph.renderer.nodes) {
            let text = this.getDisplayText(node);
            node.getDisplayText = () => text;
            node.didSetTitle = true;
            node.initGraphics();
        }
        graph.renderer.onIframeLoad();
    }
    //@ts-ignore
    getDisplayText(node) {
        //@ts-ignore
        let cache = this.plugin.app.metadataCache.getCache(node.id);
        if (cache == undefined || cache.headings == undefined) {
            return node.id;
        }
        if (cache.headings.length == 0) {
            return node.id;
        }
        return cache.headings[0].heading;
    }
    getGraphOfType(type) {
        //@ts-ignore
        let leaves = this.plugin.app.workspace.getLeavesOfType(type); // this function takes a string instead of view object, so it's easier
        //@ts-ignore
        for (const leaf of leaves) {
            if (leaf.view.getViewType() == type) {
                console.log("found graph view");
                return leaf.view;
            }
        }
    }
    getGraph() {
        var _a;
        //@ts-ignore
        if (this.plugin.app.internalPlugins.getPluginById('graph')) { // no need to bother if the graph is disabled
            return (_a = this.getGraphOfType('graph')) !== null && _a !== void 0 ? _a : this.getGraphOfType('localgraph');
        }
    }
}

const DEFAULT_SETTINGS = {
    showAllNumbers: false,
    filterList: ['md'],
    blacklist: false,
};

class FileExplorerNoteCount extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.settings = DEFAULT_SETTINGS;
        this.vaultHandler = new VaultHandler(this);
        this.graphInteractor = new GraphInteractor(this);
        /** compatible with theme that hide root folder */
        this.doHiddenRoot = (revert = false) => {
            if (!this.fileExplorer) {
                console.error('file-explorer not found');
                return;
            }
            const root = this.fileExplorer.fileItems['/'];
            const styles = getComputedStyle(root.titleInnerEl);
            const setup = () => {
                const shouldHide = styles.display === 'none' ||
                    styles.color === 'rgba(0, 0, 0, 0)';
                root.titleEl.toggleClass(rootHiddenClass, !revert && shouldHide);
            };
            if (styles.display !== '')
                setup();
            else {
                let count = 0;
                const doId = window.setInterval(() => {
                    if (count > 10) {
                        console.error('%o styles empty', root.titleInnerEl);
                        window.clearInterval(doId);
                    }
                    else if (styles.display === '') {
                        count++;
                    }
                    else {
                        setup();
                        window.clearInterval(doId);
                    }
                }, 100);
            }
        };
        this.initialize = (revert = false) => {
            // this.graphInteractor.updateGraphNodes();
            const leaves = this.app.workspace.getLeavesOfType('file-explorer');
            if (leaves.length > 1)
                console.error('more then one file-explorer');
            else if (leaves.length < 1)
                console.error('file-explorer not found');
            else {
                if (!this.fileExplorer)
                    this.fileExplorer = leaves[0].view;
                setupTitle(this, this.vaultHandler.vault, revert);
                // this.doHiddenRoot(revert);
                if (!revert) {
                    // this.registerEvent(
                    //     this.app.workspace.on('css-change', this.doHiddenRoot),
                    // );
                    this.app.workspace.on('layout-change', () => setTimeout(() => this.graphInteractor.updateGraphNodes(), 1));
                    this.vaultHandler.registerVaultEvent();
                    if (this.settings.showAllNumbers)
                        document.body.addClass('oz-show-all-num');
                }
                else {
                    this.app.workspace.removeEventListener('layout-change', this);
                    for (const el of document.getElementsByClassName(withSubfolderClass)) {
                        el.removeClass(withSubfolderClass);
                    }
                    document.body.removeClass(showAllNumbersClass);
                }
            }
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading FileExplorerNoteTitle');
            this.app.workspace.onLayoutReady(this.initialize);
        });
    }
    onunload() {
        console.log('unloading FileExplorerNoteTitle');
        this.initialize(true);
    }
    reloadTitle() {
        setupTitle(this, this.vaultHandler.vault);
    }
}

module.exports = FileExplorerNoteCount;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
